article(data-role='iron-router')
  h1 Iron router
  p This small styles eases the customization of Iron router progress.
  pre: code.bash.
    meteor add iron:router multiply:iron-router-progress
  p Usage in <b>Stylus</b>
  pre: code.stylus.
    @import s(basePath, ironprogress)

article(data-role='links')
  h1 Links
  blockquote Inspired by 
    cite: a(href='http://tympanus.net/codrops/2014/06/04/inspiration-for-inline-anchor-styles/', target='_blank') Codrops
  p.
    Links are animated when hovered. Using your main color scheme or any custom
    colors.
  figure
    ul
      li: a(href='/') Normal link
      li: a(href='/') Info link
      li: a(href='/') Success link
      li: a(href='/') Warning link
      li: a(href='/') Danger link
      li: a(href='/') Custom link
  p Usage in <b>Stylus</b>
  pre: code.stylus.
    @import s(basePath, links)
    cpLinks(brandColor)
  p Usage in <b>Jade</b>
  pre: code.jade.
    a(href='/') Normal link

article(data-role='checkbox')
  h1 Checkbox
  p.
    For your forms, you can use checkbox as animated switches using
    your main color scheme.
  figure
    span.checkbox
      label(for='switch') Put it on?
      input(type='checkbox', id='switch', name='switch')
  p Usage in <b>Stylus</b>
  pre: code.stylus.
    @import s(basePath, checkbox)
    cpCheckbox(bgColor, brandSuccess, brandDanger, brandColor)
  p Usage in <b>Jade</b>
  pre: code.jade.
    span.checkbox
      label(for='switch') Put it on?
      input(type='checkbox', id='switch', name='switch')

article(data-role='select')
  h1 Select
  p.
    Still for your forms, select are animated and customizable with your main
    color scheme.
  figure
    .select-custom(tabindex='0')
      span Civility
      p#civility= selectedCivility
      div: ul
        each civility
          li(data-option, data-value=this)= this
  p.
    We first start by setting a reactive variable as a the content receiver for
    the selected value.
  pre: code.bash.
    meteor add reactive-var
  p <b>Stylus</b> is like every other except that the container is a flexbox.
  pre: code.stylus.
    @import s(basePath, selectCustom)
    cpCheckbox(bgColor, brandSuccess, brandDanger, brandColor)
  p The <b>Jade</b> file isn't a select, it's a custom set of tags:
  pre: code.jade.
    .select-custom(tabindex='0')
      span Civility
      p#civility= selectedCivility
      div: ul
        each civility
          li(data-option, data-value=this)= this
  p The <b>Coffee</b> file requires the setup of a reactive var:
  pre: code.coffee.
    Template.others.created = ->
      @rxCivility = new ReactiveVar
      @rxCivility.set ''
      @autorun (computation) =>
        civility = @rxCivility.get()
        unless computation.firstRun
          $selectCustom = @$ '.select-custom'
          $selectCustom.addClass 'filled'
    Template.others.helpers
      selectedCivility: -> Template.instance().rxCivility.get()
      civility: -> ['Mr', 'Ms', 'Mrs', 'Dr']
    Template.others.events
      'click .select-custom li': (e, t) ->
        t.rxCivility.set e.target.textContent
